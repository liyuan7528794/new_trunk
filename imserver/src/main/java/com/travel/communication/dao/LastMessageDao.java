package com.travel.communication.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAST_MESSAGE".
*/
public class LastMessageDao extends AbstractDao<LastMessage, Long> {

    public static final String TABLENAME = "LAST_MESSAGE";

    /**
     * Properties of entity LastMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SenderId = new Property(1, String.class, "senderId", false, "SENDER_ID");
        public final static Property ReceiverId = new Property(2, String.class, "receiverId", false, "RECEIVER_ID");
        public final static Property UnReadNumber = new Property(3, Integer.class, "unReadNumber", false, "UN_READ_NUMBER");
        public final static Property MessageId = new Property(4, Long.class, "messageId", false, "MESSAGE_ID");
        public final static Property IsVisible = new Property(5, Boolean.class, "isVisible", false, "IS_VISIBLE");
    };

    private DaoSession daoSession;


    public LastMessageDao(DaoConfig config) {
        super(config);
    }
    
    public LastMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAST_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SENDER_ID\" TEXT," + // 1: senderId
                "\"RECEIVER_ID\" TEXT," + // 2: receiverId
                "\"UN_READ_NUMBER\" INTEGER," + // 3: unReadNumber
                "\"MESSAGE_ID\" INTEGER," + // 4: messageId
                "\"IS_VISIBLE\" INTEGER);"); // 5: isVisible
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAST_MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LastMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(2, senderId);
        }
 
        String receiverId = entity.getReceiverId();
        if (receiverId != null) {
            stmt.bindString(3, receiverId);
        }
 
        Integer unReadNumber = entity.getUnReadNumber();
        if (unReadNumber != null) {
            stmt.bindLong(4, unReadNumber);
        }
 
        Long messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(5, messageId);
        }
 
        Boolean isVisible = entity.getIsVisible();
        if (isVisible != null) {
            stmt.bindLong(6, isVisible ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(LastMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LastMessage readEntity(Cursor cursor, int offset) {
        LastMessage entity = new LastMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiverId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // unReadNumber
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // messageId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isVisible
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LastMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSenderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiverId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnReadNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMessageId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIsVisible(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LastMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LastMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDataDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDataDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMessageDao().getAllColumns());
            builder.append(" FROM LAST_MESSAGE T");
            builder.append(" LEFT JOIN USER_DATA T0 ON T.\"RECEIVER_ID\"=T0.\"ID\"");
            builder.append(" LEFT JOIN USER_DATA T1 ON T.\"SENDER_ID\"=T1.\"ID\"");
            builder.append(" LEFT JOIN MESSAGE T2 ON T.\"MESSAGE_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LastMessage loadCurrentDeep(Cursor cursor, boolean lock) {
        LastMessage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserData receiver = loadCurrentOther(daoSession.getUserDataDao(), cursor, offset);
        entity.setReceiver(receiver);
        offset += daoSession.getUserDataDao().getAllColumns().length;

        UserData sender = loadCurrentOther(daoSession.getUserDataDao(), cursor, offset);
        entity.setSender(sender);
        offset += daoSession.getUserDataDao().getAllColumns().length;

        Message message = loadCurrentOther(daoSession.getMessageDao(), cursor, offset);
        entity.setMessage(message);

        return entity;    
    }

    public LastMessage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LastMessage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LastMessage> list = new ArrayList<LastMessage>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LastMessage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LastMessage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
