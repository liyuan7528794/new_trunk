package com.travel.communication.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MESSAGE".
 */
public class Message {

    private Long id;
    private String senderId;
    private String receiverId;
    private String ownerId;
    private Integer state;
    private Integer chatType;
    /** Not-null value. */
    private java.util.Date create;
    private String content;
    private Integer messageType;
    private Long timeLong;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageDao myDao;

    private UserData sender;
    private String sender__resolvedKey;

    private UserData receiver;
    private String receiver__resolvedKey;

    private UserData owner;
    private String owner__resolvedKey;


    public Message() {
    }

    public Message(Long id) {
        this.id = id;
    }

    public Message(Long id, String senderId, String receiverId, String ownerId, Integer state, Integer chatType, java.util.Date create, String content, Integer messageType, Long timeLong) {
        this.id = id;
        this.senderId = senderId;
        this.receiverId = receiverId;
        this.ownerId = ownerId;
        this.state = state;
        this.chatType = chatType;
        this.create = create;
        this.content = content;
        this.messageType = messageType;
        this.timeLong = timeLong;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSenderId() {
        return senderId;
    }

    public void setSenderId(String senderId) {
        this.senderId = senderId;
    }

    public String getReceiverId() {
        return receiverId;
    }

    public void setReceiverId(String receiverId) {
        this.receiverId = receiverId;
    }

    public String getOwnerId() {
        return ownerId;
    }

    public void setOwnerId(String ownerId) {
        this.ownerId = ownerId;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Integer getChatType() {
        return chatType;
    }

    public void setChatType(Integer chatType) {
        this.chatType = chatType;
    }

    /** Not-null value. */
    public java.util.Date getCreate() {
        return create;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreate(java.util.Date create) {
        this.create = create;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Integer getMessageType() {
        return messageType;
    }

    public void setMessageType(Integer messageType) {
        this.messageType = messageType;
    }

    public Long getTimeLong() {
        return timeLong;
    }

    public void setTimeLong(Long timeLong) {
        this.timeLong = timeLong;
    }

    /** To-one relationship, resolved on first access. */
    public UserData getSender() {
        String __key = this.senderId;
        if (sender__resolvedKey == null || sender__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDataDao targetDao = daoSession.getUserDataDao();
            UserData senderNew = targetDao.load(__key);
            synchronized (this) {
                sender = senderNew;
            	sender__resolvedKey = __key;
            }
        }
        return sender;
    }

    public void setSender(UserData sender) {
        synchronized (this) {
            this.sender = sender;
            senderId = sender == null ? null : sender.getId();
            sender__resolvedKey = senderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public UserData getReceiver() {
        String __key = this.receiverId;
        if (receiver__resolvedKey == null || receiver__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDataDao targetDao = daoSession.getUserDataDao();
            UserData receiverNew = targetDao.load(__key);
            synchronized (this) {
                receiver = receiverNew;
            	receiver__resolvedKey = __key;
            }
        }
        return receiver;
    }

    public void setReceiver(UserData receiver) {
        synchronized (this) {
            this.receiver = receiver;
            receiverId = receiver == null ? null : receiver.getId();
            receiver__resolvedKey = receiverId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public UserData getOwner() {
        String __key = this.ownerId;
        if (owner__resolvedKey == null || owner__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDataDao targetDao = daoSession.getUserDataDao();
            UserData ownerNew = targetDao.load(__key);
            synchronized (this) {
                owner = ownerNew;
            	owner__resolvedKey = __key;
            }
        }
        return owner;
    }

    public void setOwner(UserData owner) {
        synchronized (this) {
            this.owner = owner;
            ownerId = owner == null ? null : owner.getId();
            owner__resolvedKey = ownerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
