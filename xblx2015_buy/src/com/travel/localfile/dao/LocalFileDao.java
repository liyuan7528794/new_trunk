package com.travel.localfile.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_FILE".
*/
public class LocalFileDao extends AbstractDao<LocalFile, Long> {

    public static final String TABLENAME = "LOCAL_FILE";

    /**
     * Properties of entity LocalFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property LocalPath = new Property(3, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property RemotePath = new Property(4, String.class, "remotePath", false, "REMOTE_PATH");
        public final static Property ThumbnailPath = new Property(5, String.class, "thumbnailPath", false, "THUMBNAIL_PATH");
        public final static Property OrderId = new Property(6, String.class, "orderId", false, "ORDER_ID");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(8, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property LongitudeLatitude = new Property(10, String.class, "longitudeLatitude", false, "LONGITUDE_LATITUDE");
        public final static Property IsUpLoaded = new Property(11, Boolean.class, "isUpLoaded", false, "IS_UP_LOADED");
        public final static Property Duration = new Property(12, Long.class, "duration", false, "DURATION");
        public final static Property Others = new Property(13, String.class, "others", false, "OTHERS");
    };


    public LocalFileDao(DaoConfig config) {
        super(config);
    }
    
    public LocalFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"FILE_NAME\" TEXT," + // 2: fileName
                "\"LOCAL_PATH\" TEXT," + // 3: localPath
                "\"REMOTE_PATH\" TEXT," + // 4: remotePath
                "\"THUMBNAIL_PATH\" TEXT," + // 5: thumbnailPath
                "\"ORDER_ID\" TEXT," + // 6: orderId
                "\"TYPE\" INTEGER," + // 7: type
                "\"CREATE_TIME\" INTEGER," + // 8: createTime
                "\"ADDRESS\" TEXT," + // 9: address
                "\"LONGITUDE_LATITUDE\" TEXT," + // 10: longitudeLatitude
                "\"IS_UP_LOADED\" INTEGER," + // 11: isUpLoaded
                "\"DURATION\" INTEGER," + // 12: duration
                "\"OTHERS\" TEXT);"); // 13: others
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(3, fileName);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(4, localPath);
        }
 
        String remotePath = entity.getRemotePath();
        if (remotePath != null) {
            stmt.bindString(5, remotePath);
        }
 
        String thumbnailPath = entity.getThumbnailPath();
        if (thumbnailPath != null) {
            stmt.bindString(6, thumbnailPath);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(7, orderId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String longitudeLatitude = entity.getLongitudeLatitude();
        if (longitudeLatitude != null) {
            stmt.bindString(11, longitudeLatitude);
        }
 
        Boolean isUpLoaded = entity.getIsUpLoaded();
        if (isUpLoaded != null) {
            stmt.bindLong(12, isUpLoaded ? 1L: 0L);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(13, duration);
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(14, others);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalFile readEntity(Cursor cursor, int offset) {
        LocalFile entity = new LocalFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remotePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbnailPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // longitudeLatitude
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isUpLoaded
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // duration
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // others
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemotePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbnailPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLongitudeLatitude(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsUpLoaded(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setDuration(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setOthers(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocalFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocalFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
